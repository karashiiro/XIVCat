@page "/"

@using Lumina
@using Lumina.Excel.GeneratedSheets
@inject GameData GameDataService

<h1>Items</h1>

<input type="search" @oninput="OnSearchInput"/>

<table class="table">
    <colgroup>
        <col span="1" style="width: 10%;"/>
        <col span="1" style="width: 10%;"/>
        <col span="1" style="width: 30%;"/>
        <col span="1" style="width: 50%;"/>
    </colgroup>
    <thead>
    <tr>
        <th>Icon</th>
        <th>ID</th>
        <th>Name</th>
        <th>Item Level</th>
    </tr>
    </thead>
    <tbody>
    <Virtualize ItemsProvider="GetItemsProvider" OverscanCount="12" @ref="virtualizeItems">
        <ItemContent Context="item">
            <tr>
                <td><img src="@Util.GetIconUrl(item.Icon)" alt="" width="50" height="50"/></td>
                <td>@item.RowId</td>
                <td><NavLink href="@Util.GetItemPageUrl(item.RowId)">@item.Name</NavLink></td>
                <td>@item.LevelItem.Row</td>
            </tr>
        </ItemContent>
        <Placeholder>
            <p><em>Loading items...</em></p>
        </Placeholder>
    </Virtualize>
    </tbody>
</table>


@code {
    private string searchText = "";

    private Virtualize<Item>? virtualizeItems;

    private ValueTask<ItemsProviderResult<Item>> GetItemsProvider(ItemsProviderRequest req)
    {
        if (string.IsNullOrEmpty(searchText))
        {
            var items = GameDataService.GetExcelSheet<Item>()!;
            var itemsNext = items
                .OrderByDescending(item => item.LevelItem.Row)
                .Skip(req.StartIndex)
                .Take(req.Count);
            var res = new ItemsProviderResult<Item>(itemsNext, (int)items.RowCount);
            return ValueTask.FromResult(res);
        }
        else
        {
            var items = GameDataService.GetExcelSheet<Item>()!
                .Where(item =>
                {
                    var name = ((string)item.Name).ToLowerInvariant();
                    var term = searchText.ToLowerInvariant();
                    return term.Contains(' ')
                        ? name.Contains(term)
                        : name.Split(' ').Any(word => word.StartsWith(term) || word.EndsWith(term));
                })
                .ToList();
            var itemsNext = items
                .OrderByDescending(item => item.LevelItem.Row)
                .Skip(req.StartIndex)
                .Take(req.Count);
            var res = new ItemsProviderResult<Item>(itemsNext, items.Count);
            return ValueTask.FromResult(res);
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        if (virtualizeItems == null)
        {
            return;
        }

        searchText = (string?)e.Value ?? "";
        await virtualizeItems.RefreshDataAsync();
    }

}
